{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "strings in Python are arrays of bytes representing unicode characters. a = \"Hello, Yulah\" print(a[7])"
      ],
      "metadata": {
        "id": "MlxPN4NB8FIi"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **strings == > array**"
      ],
      "metadata": {
        "id": "H_b6Q6gG8XM3"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **index begins with 0**"
      ],
      "metadata": {
        "id": "rks2tN-E8chu"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Strings are Arrays ==> acces the elemet of arrays Python does not have a character data type, a single character is simply a string with a length of 1 a = \"Hello, kitty\" print(a[4])"
      ],
      "metadata": {
        "id": "_zLAXeDg8gJu"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **strings == > array**"
      ],
      "metadata": {
        "id": "MbGOen6x8ogA"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **index begins with 0**"
      ],
      "metadata": {
        "id": "5uun7tUl8r2W"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Looping Through a String for x in \"Go kitty\": print(x) String Length:To get the length of a string, use the len()function. a = \"Hello, red kitty!\" print(len(a))"
      ],
      "metadata": {
        "id": "iqFZyRG68vqe"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **wrong: print(length(a))**"
      ],
      "metadata": {
        "id": "Q9obfBAS9GTH"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "QUIZ:tell me how many char appear in \"dshdsjadhsjahdsjhdecwej dsaksdjl\"\n",
        "\n",
        "a = \"dshdsjadhsjahdsjhdecwej dsaksdjl\" print(len(a))"
      ],
      "metadata": {
        "id": "q4EXFqmA9Lt_"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **wrong: print(length(a))**"
      ],
      "metadata": {
        "id": "vqa1-Cqx9O2m"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **33 = 31 letter 2 space**"
      ],
      "metadata": {
        "id": "n8_GeiIb9bUn"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Check String:To check if a certain phrase or character is present in a string, we can use the keyword in. keyword in vs if True or False txt = \"The best things in life are free!Gofor it \""
      ],
      "metadata": {
        "id": "LVZRW_n39ijH"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **print(\"free\" in txt) == > True**"
      ],
      "metadata": {
        "id": "2zwMB_xi9jxX"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **print(\"Gofor\" in txt) == > True**"
      ],
      "metadata": {
        "id": "kOMwKVhK9ogP"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "print(\"Gofo\" in txt) # False txt = \"The best things in life are free!Itrust you \" if \"trust you\" in txt: print (\"trust you, 'free' is present.\")\n",
        "\n",
        "txt = \"The best things in life are free!Itrust you \" if \"trust you\" in txt: print (\"trust you, 'free' is present.\")"
      ],
      "metadata": {
        "id": "2CvGBCkp9sIv"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "txt = \"The best things in life are free!HDJSAdhjs  dhsjahd32 dsaDJHSajdh \"\n",
        "if \"HJSAdhj\" in txt:\n",
        "  print(\"Yes, 'HJSAdhj' is present.\")\n",
        "- Negative Indexing\n",
        "b = \"Hello, Angelle !\"\n",
        "print(b[-5:-2])\n",
        "# -2 not included\n",
        "- Python - Modify Strings\n",
        "- The upper() method returns the string in upper case:\n",
        "- The lower() method returns the string in lower case\n",
        "b = \"Hello, Figther!\"\n",
        "print(b.upper())\n",
        "- Remove Whitespace with strip() method\n",
        "- The strip() method removes any whitespace from the beginning or the end\n",
        "b = \" Hello, Angelle! \"\n",
        "print(b.strip())\n",
        "- The replace()method replaces a string with another string\n",
        "- seperator\n",
        "b = \" Hello, Figther! \"\n",
        "print(b.replace(\"o\", \"w\"))\n",
        "\n",
        "b = \" Hello, Fighter! \"\n",
        "print(b.split(\",\"))\n",
        "\n",
        "b = \" Hello, Fighter! \"\n",
        "print(b.split(\"F\"))\n",
        "\n",
        "- String Concatenation:To concatenate, or combine, two strings you can use the + operator.\n",
        "a = \"Hello\"\n",
        "b = \" , \"\n",
        "c = \"Angelle\"\n",
        "d = a + b + c\n",
        "print(d)\n",
        "Hello , Angelle\n",
        "\n",
        "- Python - Format - Strings\n",
        "age = 19\n",
        "txt = \"My name is Angelle , and I am {}\"\n",
        "print(txt.format(19))\n",
        "My name is Angelle , and I am 19\n",
        "\n",
        "\n",
        "\n",
        "quantity = 3\n",
        "itemno = 567\n",
        "price = 49.95\n",
        "myorder = \"I want {2} pieces of item {0} for {1} dollars.\"\n",
        "print(myorder.format(quantity, itemno, price))\n",
        "- String Methods\n",
        "\n",
        "txt = \"hello, and welcome to my world.\"\n",
        "\n",
        "x = txt.capitalize()\n",
        "\n",
        "print (x)\n",
        "\n",
        "\n",
        "```python\n",
        "txt = \"Hello, And Welcome To My World!\"\n",
        "\n",
        "x = txt.casefold()\n",
        "\n",
        "print(x)"
      ],
      "metadata": {
        "id": "br4SYpCI9uzR"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}